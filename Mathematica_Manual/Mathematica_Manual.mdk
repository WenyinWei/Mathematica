Title         : Mathematica Manual

Author        : Wenyin Wei
Email         : weiwy16@mails.tsinghua.edu.cn

Bibliography  : example.bib

[INCLUDE=book]
[INCLUDE=webtoc]
[INCLUDE=webanchors]

[TITLE]

~ Begin SidePanel
[TOC]
~ End SidePanel

~ Begin MainPanel

# Introduction     { #sec-intro }

Let's start with recoding how to play with Mathematica.

## Running Efficiency!

1. Use floating-point numbers if you can, and use them early.
* Learn about Compile.

 Not everything can be compiled, and very simple code might not benefit,
  but complex low-level numerical code can get a really big speedup.
  
  Be aware though that many Mathematica functions like Table, Plot, NIntegrate, and so on automatically compile their arguments, so you wonâ€™t see any improvement when passing them compiled versions of your code.
  
But we can go further by giving Compile some hints about the parallelizable nature of the code, getting an even better result. For example:
```Mathematica
"RuntimeAttributes->{Listable}, Parallelization->True, CompilationTarget->"C".
```

* Use built-in functions.
* Use Wolfram Workbench.
* Remember values that you will need in the future.
``` Mathematica
 fib[n_]:= fib[n] = fib[n-2] + fib[n-1]
```
* Parallelize. 
 
 There is a collection of tools for this, but for very independent tasks, you can get quite a long way with just ParallelTable, ParallelMap, and ParallelTry.

* Use Sow and Reap to accumulate large amounts of data (not AppendTo).

* Use Block or With rather than Module.

* Go easy on pattern matching.
* Try doing things differently.

# File
## Directory
This is to set the work directory at our notebook directory.
```
SetDirectory[NotebookDirectory[]];
```
## Plot

A scientific plot must be regulated under the scholar regulation.
```
Show[StreamPlot[{y - x^3 + x, -x}, {x, -2, 2}, {y, -2, 2}, 
  PlotTheme -> "Scientific"], 
 FrameLabel -> {{HoldForm[Subscript[u, R]], 
    None}, {HoldForm[Subscript[i, R]], None}}, PlotLabel -> None, 
 LabelStyle -> {GrayLevel[0]}]
```

## Export

### Export svg

```
roundtripPDF[gr_, opts : OptionsPattern[]] := 
  First@ImportString@ExportString[gr, "PDF", opts];

asXML[gr_] := 
  ImportString[ExportString[gr, "SVG"], "XML", "ReadDTD" -> False];

addComment[None, elt_] := elt;
addComment[Automatic, elt_] := 
  addComment["*** Exported from Mathematica ***", elt];
addComment[comment_String, XMLElement[tag_, attrs_, contents_]] := 
  XMLElement[tag, attrs, 
   Append[contents, XMLObject["Comment"][comment]]];

addAttributes[oldAttrs_, newAttrs_] := 
  DeleteDuplicatesBy[Join[oldAttrs, newAttrs], First];

Options[Pillsy`ExportSVG] := {Background -> Automatic, 
   AspectRatio -> Automatic, "CommentString" -> Automatic};

Pillsy`ExportSVG[file_String, expr_, opts : OptionsPattern[]] := 
 With[{svgStructure = asXML@roundtripPDF[expr, opts], 
   dims = ToString /@ 
     ImageDimensions@
      Rasterize[Show[expr, ImagePadding -> 0], "Image"]}, 
  Export[file, 
   svgStructure /. 
    XMLElement["svg", attrs_, contents_] :> 
     addComment[OptionValue["CommentString"], 
      XMLElement["svg", 
       addAttributes[attrs, 
        Join[{"viewBox" -> "0 0 " <> StringRiffle[dims], 
          "width" -> dims[[1]] <> "pt", 
          "height" -> dims[[2]] <> "pt"}, 
         If[OptionValue[AspectRatio] === 
           Full, {"preserveAspectRatio" -> "none"}, {}]]], contents]],
    "XML"]]
```
This function Pillsy`ExportSVG[] can be used as an upgraded function to export svg file.

### Export Plot 
It was dangerous to export a low plot with low resolution.

```
Export["irur.png", %52, ImageResolution -> 300]
```



[BIB]

~ End MainPanel